<!DOCTYPE html>
<html>
	<head>
		<!-- Get Style Sheets and JS from Bootstrap -->
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

		<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
		<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js">
		</script>

		<link rel="stylesheet" href="/style.css">

		<meta name="viewport" content="width=device-width, initial-scale=1">

		<title>Theory of Computation - Section</title>
	</head>

	<body>
		<script src="/script.js"></script>

		<!--Navigation bar-->
		<div class="nav-placeholder" id="nav-placeholder"></div>
		<!--end of Navigation bar-->

	<div class="information">
		<h1>Theory of Computation</h1>
		<h4>College Level Crash Course</h4>
    <span class="dot"></span><p><i>Still Adding To This</i></p>

    <br>
    <br>

    <hr>

		<div class="table-of-contents"></div>
		
    <hr>

    <div>
      <p class="category-header">Rundown</p>

			<div>
	      <p class="section-header" id="how-to-read">Structure of this Page</p>
	      <p class="how-to-read">This page is broken into mutiple sections. The sections are given in the contents above. There are subsections of those sections. Understanding the depth of analysis of each section can be determined by the following "algorithm":
	        
	        (A) Beggining of Section &lt;- Intro
	        (B) Subsection of A &lt;- Continuation of A so more in depth
	        (C) Subsection of B &lt;- Continuation of B so more in depth
	        ... 
	        (A\(_{n}\)) Subsection of A\(_{n-1}\) &lt;- Continuation of A\(_{n-1}\) and most in depth
	      </p>
			</div>
    </div>

		<div class="randomized-algorithms" id="randomized-algorithms">
			<p class="category-header">Theory of Computation</p>

      <div class="randomized-algorithms" id="randomized-algorithms">
				<p class="section-header">Sections Covered (So Far)</p>

        <p>
          The sections that will be covered in this articule are Automata, Computability, and Complexity theory. I will give a brief description of each field. Automata theory deals with the properties of mathematical models of computation, as well as what computational problems can be solved with the models.
        </p>

      </div>

			<div class="randomized-algorithms" id="randomized-algorithms">
				<p class="section-header">Mathematical Terms</p>

				<div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Sets</p>
          
          <div class="categories" style="overflow: hidden;">
              <p>Key Terms</p>
              <p>Examples</p>
          </div>
                                             
					<p>
						Sets consist of a collection of elements or members. One way to mathematically denote a set can be see in the example: \(S = \left\{3, 1, 4, 1, 5\right\}\). The set is called S and the elements in the set are 3, 1, 4,... Now oftentimes with sets, we need to denote membership and non-membership of a set. The reason being is that we do not always want to and sometimes it is not possible to write out every element of a set. A set could contain millions of numbers, or a couple possibly is infinite. Membership and non-membership is denoted with the symbols \(\in\) and \(\notin\) respectively. For example, let's take our set \(S\). We would say that 4 \(\in \left\{3, 1, 4, 1, 5\right\}\), but 7 \(\notin \left\{3, 1, 4, 1, 5\right\}\). 
            
            We can of course have sets that contain the same elements as another set. We can denote this relationship in two ways depending on the contents of each set. Let's say we have two sets \(A\) and \(B\). If every member of \(A\) is also a member of \(B\) then this would be called a subset and is denoted as \(\subset\). This is compared to a proper subset for which every \(A\) is considered a subset of \(B\), however, they are not equal. For example, \(S = \left\{1, 2, 3\right\}\) and \(P = \left\{1, 2, 3, 4, 5, 6\right\}\) we would say that \(S \subseteq P\), or that \(S\) is a proper subset of \(P\). 
            
            We can also have sets that are empty, for which the set does not have any members. This empty set is denoted as \(\emptyset\). A set with 1 member in it is called a singleton set and a set with two members is called an unordered pair.

            <p class="subsubsection-header">Sets \(\rightarrow\) Set Builder Notation</p>

            <div class="categories" style="overflow: hidden;">
              <p>List Comprehenssion</p>
            </div>
          
            <p>
              With sets, we want to describe what elements the set contains. However, sometimes sets may be too large to fully write them out or we want a more compact way of describing what elements the set contains. In set theory, what we do to solve this problem is use set builder notation. 

              A quick aside, if you are familiar with Python list comprehension then set builder notation will be easier to understand. It is very interesting because programming languages can be seen as an extension of math notation. One of the reasons why is because computer science came from math. An example of list comprehension in Python is the following. 
            </p>

<p class="code">
code: List Comprehension

Example 1: list_a = [x for x in range(100)]

Example 2: list_b = [x for x in range(100) if x % 2 == 0]
</p>

            </p>
              Let's continue with set builder notation. Let's say we wanted to describe a set that contains every number from 0-1,000,000. This would obviously be too tiresome to write out by hand. Instead what we can do is use set builder notation. The format for set builder notation looks like \(\left\{n | some\,rule\,about\,n\right\}\). We have the \(\left\{\right\}\) telling us we are referring to a set. The character \(n\) is our generic element. You can think of it as a variable taking on many values. Then we have such as \{|\) n element is added to the set given, "some rule about n". So for describing a set with elements containing 0-1,000,000 we can write \(\left\{n | n \leq 1000000\right\}\).
            </p>
				</div>

        <div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Sequences and Tuples</p>
					<p>
						Text
					</p>
				</div>

        <div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Functions and Relations</p>
					<p>
						Text
					</p>
				</div>

        <div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Graphs</p>
					<p>
						Text
					</p>
				</div>

        <div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Strings and Languages</p>
					<p>
						Text
					</p>
				</div>

        <div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Boolean Logic</p>
					<p>
						Text
					</p>
				</div>
			</div>

      <div class="randomized-algorithms" id="randomized-algorithms">
				<p class="section-header">Automata and Languages</p>

				<div class="best-case-equation" id="best-case-equation">
          <p class="subsection-header">Regular Languages</p>

          <p class="subsubsection-header">Regular Languages \(\rightarrow\) Deterministic Finite Automaton (DFA)</p>

          <p>
            A deterministic finite automaton (DFA) is a 5-tuple:
          </p>

          <h5 class="math-notation">$$\left(Q, \Sigma, \delta, q_{0}, F\right)$$</h5>

          <p>
            where:
            <ul>
              <li>\(Q\) is a finite set of states</li>
              <li>\(\Sigma\) is an alphabet</li>
              <li>\(\delta\) is a transition function described as \(\delta : Q \times \Sigma \rightarrow Q\)</li>
              <li>\(q_{0} \in Q\) is the initial state</li>
              <li>\(F \subseteq Q\) is a subset of states called accept states</li>
            </ul>
          </p>


				</div>
			</div>

      <div class="best-case-equation" id="best-case-equation">
        <p class="subsection-header">Context Free Languages Languages</p>

        <p class="subsubsection-header">Context Free Languages \(\rightarrow\) Pushdown Automata (PDA)</p>

        <p>
          A pushdown automata (PFA) is a 6-tuple:
        </p>

        <h5 class="math-notation">$$\left(Q, \Sigma, \Gamma, \delta, q_{0}, F\right)$$</h5>

        <p>
          where:
          <ul>
            <li>\(Q\) is a finite set of states</li>
            <li>\(\Sigma\) is an alphabet</li>
            <li>\(\Gamma\) is the stack alphabet</li>
            <li>\(\delta\) is a transition function described as \(\delta : Q \times \Sigma \times \Gamma \rightarrow P(Q \times \Gamma_{\epsilon})\)</li>
            <li>\(q_{0} \in Q\) is the initial state</li>
            <li>\(F \subseteq Q\) is a subset of states called accept states</li>
          </ul>
        </p>


      </div>
		</div>

	</div>

		<div class="collapsible-contents-button">
			<div class="panel-group">
				<div class="panel panel-default">
					<div class="panel-collapse collapse" id="collapse">
						<li><a href="#nav-placeholder">Top of the Page</a></li>

						<br>
	
						<div class="table-of-contents"></div>
	
						<br>
						
	          <li><a href="#footer-placeholder">Bottom of the Page</a></li>
					</div>
					<button class="btn btn-primary contents-button" type="button" data-toggle="collapse" data-target="#collapse" aria-expanded="false" aria-controls="collapseExample" id="contents-button">
						<i class="far fa-list-alt" id="table-of-contents-icon"></i>
					</button>
				</div>
			</div>
		</div>

		<!--Footer bar-->
		<div class="footer-placeholder" id="footer-placeholder"></div>
		<!--end of Footer bar-->
	
	</body>
</html>